/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import org.threeten.bp.OffsetDateTime;
import io.swagger.model.RetrieveGeographicLocation;
import io.swagger.model.RetrieveGeographicLocationCreate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-22T19:02:40.482+03:00")

@Api(value = "retrieveGeographicLocation", description = "the retrieveGeographicLocation API")
public interface RetrieveGeographicLocationApi {

    @ApiOperation(value = "Creates a 'RetrieveGeographicLocation'", nickname = "createRetrieveGeographicLocation", notes = "", response = RetrieveGeographicLocation.class, tags={ "retrieveGeographicLocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = RetrieveGeographicLocation.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/retrieveGeographicLocation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RetrieveGeographicLocation> createRetrieveGeographicLocation(@ApiParam(value = "The Retrieve Geographic Location to be created" ,required=true )  @Valid @RequestBody RetrieveGeographicLocationCreate retrieveGeographicLocation);


    @ApiOperation(value = "List or find 'RetrieveGeographicLocation' objects", nickname = "listRetrieveGeographicLocation", notes = "", response = RetrieveGeographicLocation.class, responseContainer = "List", tags={ "retrieveGeographicLocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = RetrieveGeographicLocation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/retrieveGeographicLocation",
        produces = { "application/json" }, 
     //  consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<RetrieveGeographicLocation>> listRetrieveGeographicLocation(@ApiParam(value = "Comma separated properties to display in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "For filtering: A string. Status of the task (inProgress, terminatedWithErrror, done).") @Valid @RequestParam(value = "status", required = false) String status,@ApiParam(value = "For filtering: Requested accuracy of the retrieval") @Valid @RequestParam(value = "requestedAccuracy", required = false) Float requestedAccuracy,@ApiParam(value = "For filtering: Timestamp of end of task execution") @Valid @RequestParam(value = "time", required = false) OffsetDateTime time,@ApiParam(value = "For filtering: A string. Name of the geo location.") @Valid @RequestParam(value = "geographicLocation.name", required = false) String geographicLocationName,@ApiParam(value = "For filtering: A string. Type of the geographic location - one of: point, line, graph, ring polygon") @Valid @RequestParam(value = "geographicLocation.type", required = false) String geographicLocationType,@ApiParam(value = "For filtering: ") @Valid @RequestParam(value = "thing.type", required = false) String thingType,@ApiParam(value = "For filtering: ") @Valid @RequestParam(value = "thing.uri", required = false) String thingUri);


    @ApiOperation(value = "Retrieves a 'RetrieveGeographicLocation' by Id", nickname = "retrieveRetrieveGeographicLocation", notes = "", response = RetrieveGeographicLocation.class, responseContainer = "List", tags={ "retrieveGeographicLocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = RetrieveGeographicLocation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/retrieveGeographicLocation/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<RetrieveGeographicLocation>> retrieveRetrieveGeographicLocation(@ApiParam(value = "Identifier of the Retrieve Geographic Location",required=true) @PathVariable("id") String id);

}
