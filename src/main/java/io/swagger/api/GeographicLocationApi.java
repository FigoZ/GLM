/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.GeographicLocation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-22T19:02:40.482+03:00")

@Api(value = "geographicLocation", description = "the geographicLocation API")
public interface GeographicLocationApi {

    @ApiOperation(value = "List or find 'GeographicLocation' objects", nickname = "listGeographicLocation", notes = "", response = GeographicLocation.class, responseContainer = "List", tags={ "geographicLocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = GeographicLocation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/geographicLocation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<GeographicLocation>> listGeographicLocation(@ApiParam(value = "Comma separated properties to display in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "For filtering: A string. Name of the geo location.") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "For filtering: A string. Type of the geographic location - one of: point, line, graph, ring polygon") @Valid @RequestParam(value = "type", required = false) String type,@ApiParam(value = "For filtering: A string. Accuracy of the coordinate specified.") @Valid @RequestParam(value = "geographicPoint.accuracy", required = false) String geographicPointAccuracy,@ApiParam(value = "For filtering: A string. Geocoding referential.") @Valid @RequestParam(value = "geographicPoint.spatialRef", required = false) String geographicPointSpatialRef,@ApiParam(value = "For filtering: A string. x coordinate (usually latitude).") @Valid @RequestParam(value = "geographicPoint.x", required = false) String geographicPointX,@ApiParam(value = "For filtering: A string. y coordinate (usually longitude).") @Valid @RequestParam(value = "geographicPoint.y", required = false) String geographicPointY,@ApiParam(value = "For filtering: A string. z coordinate (usually elevation).") @Valid @RequestParam(value = "geographicPoint.z", required = false) String geographicPointZ);


    @ApiOperation(value = "Retrieves a 'GeographicLocation' by Id", nickname = "retrieveGeographicLocation", notes = "", response = GeographicLocation.class, responseContainer = "List", tags={ "geographicLocation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = GeographicLocation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/geographicLocation/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<GeographicLocation>> retrieveGeographicLocation(@ApiParam(value = "Identifier of the Geographic Location",required=true) @PathVariable("id") String id);

}
